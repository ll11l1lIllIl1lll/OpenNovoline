package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.events.*;
import cc.novoline.gui.screen.setting.Manager;
import cc.novoline.gui.screen.setting.Setting;
import cc.novoline.gui.screen.setting.SettingType;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.EnumModuleType;
import cc.novoline.modules.ModuleManager;
import cc.novoline.modules.configurations.annotation.Property;
import cc.novoline.modules.configurations.property.object.FloatProperty;
import cc.novoline.modules.configurations.property.object.PropertyFactory;
import cc.novoline.modules.visual.ClickGUI;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.network.play.client.C03PacketPlayer;
import org.checkerframework.checker.nullness.qual.NonNull;

public final class Teleport extends AbstractModule {

    /*    @Property("teleport-mode")
        private final StringProperty mode = createString("Freecam TP").acceptableValues("Freecam TP");*/
    @Property("freecam-speed")
    private final FloatProperty freecamSpeed = PropertyFactory.createFloat(4.0F).minimum(1.0F).maximum(5.0F);
    private EntityOtherPlayerMP freecamEntity;
    private double x, y, z;

    public Teleport(@NonNull ModuleManager moduleManager) {
        super(moduleManager, "Teleport", EnumModuleType.EXPLOITS, "teleport");
        Manager.put(new Setting("FC_SPEED", "Speed", SettingType.SLIDER, this, this.freecamSpeed, 0.5F));
    }

    @Override
    public void onEnable() {


        if (this.mc.player == null) {
            return;
        }

        this.x = mc.player.posX;
        this.y = mc.player.posY;
        this.z = mc.player.posZ;

        checkModule(Blink.class);
        this.freecamEntity = new EntityOtherPlayerMP(this.mc.world, mc.player.getGameProfile());
        this.freecamEntity.inventory = this.mc.player.inventory;
        this.freecamEntity.inventoryContainer = this.mc.player.inventoryContainer;
        this.freecamEntity.setPositionAndRotation(this.mc.player.posX, this.mc.player.posY,
                this.mc.player.posZ, this.mc.player.rotationYaw, this.mc.player.rotationPitch);
        this.freecamEntity.rotationYawHead = this.mc.player.rotationYawHead;
        this.freecamEntity.setEntityUniqueID(this.mc.player.getEntityUniqueID());
        this.mc.world.addEntityToWorld(this.freecamEntity.getEntityID(), this.freecamEntity);
    }

    @Override
    public void onDisable() {

        mc.world.removeEntityFromWorld(freecamEntity.getEntityID());

        mc.player.motionY = 0;
        mc.player.motionX = 0;
        mc.player.motionZ = 0;
        getModule(ClickGUI.class).setMwPort(true);
        getModule(ClickGUI.class).setCoords(new int[]{(int) mc.player.posX, (int) mc.player.posY, (int) mc.player.posZ});

    }

    @EventTarget
    private void onUpdate(MotionUpdateEvent event) {
        if (event.getState().equals(MotionUpdateEvent.State.PRE)) {
            mc.player.noClip = true;
        }
    }

    @EventTarget
    public void onPacketSend(PacketEvent event) {
        if (event.getState().equals(PacketEvent.State.OUTGOING)) {
            if (event.getPacket() instanceof C03PacketPlayer) {
                event.setCancelled(true);
            }
        }
    }

    @EventTarget
    public void onEvent(CollideWithBlockEvent event) {
        event.setBoundingBox(null);
    }

    @EventTarget
    public void onEvent(MoveEvent event) {

        if (this.mc.player.movementInput().jump()) {
            event.setY(this.mc.player.motionY = 1.8);
        } else if (this.mc.player.movementInput().sneak()) {
            event.setY(this.mc.player.motionY = -1.8);
        } else {
            event.setY(this.mc.player.motionY = 0.0D);
        }

        event.setMoveSpeed(this.freecamSpeed.get());
    }

    @EventTarget
    public void onEvent(PushBlockEvent event) {
        event.setCancelled(true);
    }

    public EntityOtherPlayerMP getTeleportEntity() {
        return freecamEntity;
    }
}
