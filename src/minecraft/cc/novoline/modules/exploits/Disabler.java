package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.events.LoadWorldEvent;
import cc.novoline.events.events.PacketEvent;
import cc.novoline.events.events.TickUpdateEvent;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.EnumModuleType;
import cc.novoline.modules.ModuleManager;
import cc.novoline.utils.ServerUtils;
import cc.novoline.utils.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import org.jetbrains.annotations.NotNull;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Disabler extends AbstractModule {

    private int key, transactions;
    private short id;
    private List<Packet> listTransactions = new CopyOnWriteArrayList();
    private Timer timer = new Timer();
    private boolean afterFly;

    public Disabler(@NotNull ModuleManager novoline) {
        super(novoline, "Disabler", EnumModuleType.EXPLOITS);
    }

    @EventTarget
    public void onPacket(PacketEvent event) {
        if (event.getState().equals(PacketEvent.State.OUTGOING)) {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();

                if (packet.getID() < 0) {
                    transactions++;

                    if (transactions > 5) {
                        id = packet.getID();
                        listTransactions.add(packet);
                        event.setCancelled(true);
                    }
                }
            }

            if (event.getPacket() instanceof C00PacketKeepAlive) {
                C00PacketKeepAlive packet = (C00PacketKeepAlive) event.getPacket();
                key = packet.getKey();
                event.setCancelled(true);
            }
        }
    }

    @EventTarget
    public void onLoadWorld(LoadWorldEvent event) {
        transactions = 0;
        id = 0;
        key = 0;
        listTransactions.clear();
    }

    @EventTarget
    public void onTick(TickUpdateEvent event) {
        if (ServerUtils.isHypixel()) {
            if (mc.player.ticksExisted % 15 == 0) {
                if (!listTransactions.isEmpty()) {
                    listTransactions.forEach(this::sendPacketNoEvent);
                    sendPacketNoEvent(new C00PacketKeepAlive(key));
                    listTransactions.clear();
                }
            }
        }
    }

    public int getKey() {
        return key;
    }

    public Timer getTimer() {
        return timer;
    }

    public void setAfterFly(boolean afterFly) {
        this.afterFly = afterFly;
    }
}
