package cc.novoline.modules.exploits;

import cc.novoline.Initializer;
import cc.novoline.events.EventTarget;
import cc.novoline.events.events.LoadWorldEvent;
import cc.novoline.events.events.PacketEvent;
import cc.novoline.events.events.PlayerUpdateEvent;
import cc.novoline.events.events.TickUpdateEvent;
import cc.novoline.gui.screen.setting.Manager;
import cc.novoline.gui.screen.setting.Setting;
import cc.novoline.gui.screen.setting.SettingType;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.EnumModuleType;
import cc.novoline.modules.ModuleManager;
import cc.novoline.modules.configurations.annotation.Property;
import cc.novoline.modules.configurations.property.object.PropertyFactory;
import cc.novoline.modules.configurations.property.object.StringProperty;
import cc.novoline.modules.exploits.Blink;
import cc.novoline.utils.ServerUtils;
import java.util.function.Supplier;
import net.acE;
import org.jetbrains.annotations.NotNull;

public class Disabler extends AbstractModule {
   @Property("mode")
   private StringProperty y;
   @Property("wd-mode")
   private StringProperty x;

   public Disabler(@NotNull ModuleManager var1) {
      super(var1, EnumModuleType.EXPLOITS, "Disabler", "Disabler");
      int var10000 = Blink.a();
      this.y = PropertyFactory.createString("Watchdog").acceptableValues(new String[]{"Watchdog", "Verus", "Simple"});
      int var2 = var10000;
      this.x = PropertyFactory.createString("Advanced").acceptableValues(new String[]{"Advanced", "Normal"});
      Manager.put(new Setting("DISABLER_MODE", "Mode", SettingType.COMBOBOX, this, this.y));
      Manager.put(new Setting("DISABLER_WD_MODE", "Watchdog Mode", SettingType.COMBOBOX, this, this.x, this::lambda$new$0));
      if(acE.b() == null) {
         ++var2;
         Blink.b(var2);
      }

   }

   @EventTarget
   public void b(PacketEvent var1) {
      int var2 = Blink.b();
      if(this.y.equals("Watchdog")) {
         Initializer.getInstance().e(var1);
         if(!this.x.equals("Advanced")) {
            return;
         }

         Initializer.getInstance().d(var1);
      }

      if(this.y.equals("Verus")) {
         if(this.mc.world.getScoreboard().getObjectiveInDisplaySlot(1).getDisplayName().equals("§a§lBlocks§e§lMC")) {
            return;
         }

         Initializer.getInstance().b(var1);
      }

      if(ServerUtils.a()) {
         Initializer.getInstance().c(var1);
      }

      if(ServerUtils.g()) {
         Initializer.getInstance().a(var1);
      }

   }

   @EventTarget
   public void a(LoadWorldEvent var1) {
      Initializer.getInstance().a(var1);
   }

   @EventTarget
   public void a(PlayerUpdateEvent var1) {
      if(this.y.equals("Verus")) {
         Initializer.getInstance().a(var1);
      }

   }

   @EventTarget
   public void a(TickUpdateEvent var1) {
      this.setSuffix((String)this.y.get());
   }

   public void onEnable() {
      this.setSuffix((String)this.y.get());
   }

   public StringProperty b() {
      return this.y;
   }

   public StringProperty a() {
      return this.x;
   }

   private Boolean lambda$new$0() {
      return Boolean.valueOf(this.y.equals("Watchdog"));
   }
}
