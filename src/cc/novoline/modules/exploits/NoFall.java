package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.events.EventState;
import cc.novoline.events.events.MotionUpdateEvent;
import cc.novoline.events.events.PacketDirection;
import cc.novoline.events.events.PacketEvent;
import cc.novoline.events.events.TickUpdateEvent;
import cc.novoline.gui.screen.setting.Manager;
import cc.novoline.gui.screen.setting.Setting;
import cc.novoline.gui.screen.setting.SettingType;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.EnumModuleType;
import cc.novoline.modules.ModuleManager;
import cc.novoline.modules.configurations.annotation.Property;
import cc.novoline.modules.configurations.property.object.PropertyFactory;
import cc.novoline.modules.configurations.property.object.StringProperty;
import cc.novoline.modules.exploits.Blink;
import cc.novoline.modules.move.LongJump;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Consumer;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer$C04PacketPlayerPosition;
import net.minecraft.network.play.client.C0APacketAnimation;

public final class NoFall extends AbstractModule {
   private double z;
   private double A;
   private List x = new CopyOnWriteArrayList();
   @Property("mode")
   private StringProperty y = PropertyFactory.createString("Packet").acceptableValues(new String[]{"Spoof", "Packet", "Verus"});

   public NoFall(ModuleManager var1) {
      super(var1, "NoFall", "No Fall", EnumModuleType.EXPLOITS, "Prevents you from taking fall damage");
      Manager.put(new Setting("NF_MODE", "Mode", SettingType.COMBOBOX, this, this.y));
   }

   @EventTarget
   public void b(PacketEvent var1) {
      int var2 = Blink.b();
      if(var1.getDirection().equals(PacketDirection.OUTGOING)) {
         if(this.y.equals("Verus")) {
            if(this.isEnabled(LongJump.class) || !(var1.getPacket() instanceof C03PacketPlayer)) {
               return;
            }

            C03PacketPlayer var3 = (C03PacketPlayer)var1.getPacket();
            if(var3.isMoving() && this.mc.player.fallDistance > 3.0F && this.mc.player.posY > 0.0D && this.mc.player.motionY != 0.0D) {
               this.x.add(var3);
               var1.setCancelled(true);
               if(this.x.size() > 4) {
                  this.x.forEach(this::sendPacketNoEvent);
                  this.x.clear();
               }
            }
         }

         if(this.y.equals("Packet") && (double)this.mc.player.fallDistance > 2.2D && this.mc.player.motionY != 0.0D && this.mc.player.posY > 0.0D) {
            if(var1.getPacket() instanceof C0APacketAnimation || var1.getPacket() instanceof C02PacketUseEntity) {
               var1.setCancelled(true);
            }

            if(var1.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer var4 = (C03PacketPlayer)var1.getPacket();
               if(var4.isMoving() && var4.isRotating()) {
                  this.sendPacketNoEvent(new C03PacketPlayer$C04PacketPlayerPosition(var4.getX(), var4.getY(), var4.getZ(), var4.isOnGround()));
                  var1.setCancelled(true);
               }
            }
         }
      }

   }

   @EventTarget
   public void a(MotionUpdateEvent var1) {
      int var2 = Blink.b();
      if(var1.getState().equals(EventState.PRE)) {
         if(this.mc.player.fallDistance > 3.0F && this.mc.player.motionY != 0.0D && this.mc.player.posY > 0.0D) {
            if(this.A + (double)this.mc.player.fallDistance - this.z > 3.0D || this.mc.player.fallDistance > 3.0F && this.A == 0.0D) {
               if(this.y.equals("Packet")) {
                  this.sendPacketNoEvent(new C03PacketPlayer(true));
               }

               if(this.y.equals("Spoof")) {
                  var1.setOnGround(true);
               }

               if(this.y.equals("Verus") && !this.isEnabled(LongJump.class)) {
                  this.x.add(new C03PacketPlayer(true));
               }

               this.A = 0.0D;
            }

            this.A += (double)this.mc.player.fallDistance - this.z;
            this.z = (double)this.mc.player.fallDistance;
            if(this.mc.player.fallDistance <= 120.0F) {
               return;
            }

            this.mc.player.motionY += 1.0E-4D * (double)this.mc.player.fallDistance;
         }

         this.A = 0.0D;
         this.z = 0.0D;
         if(this.y.equals("Verus") && !this.isEnabled(LongJump.class) && !this.x.isEmpty()) {
            this.x.forEach(this::sendPacketNoEvent);
            this.x.clear();
         }
      }

   }

   @EventTarget
   public void a(TickUpdateEvent var1) {
      this.setSuffix((String)this.y.get());
   }

   public void onEnable() {
      this.setSuffix((String)this.y.get());
   }

   public StringProperty a() {
      return this.y;
   }
}
