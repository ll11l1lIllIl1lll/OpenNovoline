package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.events.CollideWithBlockEvent;
import cc.novoline.events.events.EventState;
import cc.novoline.events.events.MotionUpdateEvent;
import cc.novoline.events.events.MoveEvent;
import cc.novoline.gui.screen.setting.Manager;
import cc.novoline.gui.screen.setting.Setting;
import cc.novoline.gui.screen.setting.SettingType;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.EnumModuleType;
import cc.novoline.modules.ModuleManager;
import cc.novoline.modules.configurations.annotation.Property;
import cc.novoline.modules.configurations.property.object.IntProperty;
import cc.novoline.modules.configurations.property.object.PropertyFactory;
import cc.novoline.modules.configurations.property.object.StringProperty;
import cc.novoline.modules.exploits.Blink;
import java.util.function.Supplier;
import net.minecraft.network.play.client.C03PacketPlayer$C04PacketPlayerPosition;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.MathHelper;

public final class Phase extends AbstractModule {
   @Property("mode")
   private StringProperty y = PropertyFactory.createString("Normal").acceptableValues(new String[]{"VClip", "Normal"});
   @Property("hieght")
   private IntProperty downClipValue = (IntProperty)((IntProperty)PropertyFactory.createInt(Integer.valueOf(-3)).minimum(Integer.valueOf(-10))).maximum(Integer.valueOf(10));

   public Phase(ModuleManager var1) {
      super(var1, "Phase", EnumModuleType.EXPLOITS, "Allows you to walks through blocks");
      Manager.put(new Setting("PHASE_MODE", "Mode", SettingType.COMBOBOX, this, this.y));
      Manager.put(new Setting("PHASE_CLIP_HEIGHT", "VClip Height", SettingType.SLIDER, this, this.downClipValue, 1.0D, this::lambda$new$0));
   }

   public void onEnable() {
      int var1 = Blink.b();
      if(this.y.equals("VClip")) {
         this.mc.player.setPosition(this.mc.player.posX, this.mc.player.posY + (double)((Integer)this.downClipValue.get()).intValue(), this.mc.player.posZ);
         this.toggle();
      }

   }

   public void onDisable() {
      this.mc.player.stepHeight = 0.625F;
   }

   @EventTarget
   public void a(CollideWithBlockEvent var1) {
      int var2 = Blink.a();
      if(this.y.equals("Normal") && this.mc.player.isInsideBlock()) {
         var1.setBoundingBox((AxisAlignedBB)null);
      }

   }

   @EventTarget
   public void a(MoveEvent var1) {
      int var2 = Blink.b();
      if(this.y.equals("Normal") && this.mc.player.isInsideBlock()) {
         if(this.mc.gameSettings.keyBindJump.isKeyDown()) {
            var1.setY(this.mc.player.motionY += 0.09000000357627869D);
         }

         if(this.mc.gameSettings.keyBindSneak.isKeyDown()) {
            var1.setY(this.mc.player.motionY -= 0.09000000357627869D);
         }

         var1.setY(this.mc.player.motionY = 0.0D);
         var1.setMoveSpeed(this.mc.player.getBaseMoveSpeed());
      }

   }

   @EventTarget
   public void a(MotionUpdateEvent var1) {
      int var2 = Blink.a();
      if(this.y.equals("Normal") && var1.getState().equals(EventState.PRE)) {
         this.mc.player.stepHeight = 0.015625F;
         float var3 = this.mc.player.movementInput().getMoveStrafe();
         float var4 = this.mc.player.movementInput().getMoveForward();
         float var5 = this.mc.player.rotationYaw;
         double var6 = 0.3D;
         double var8 = (double)(-MathHelper.sin(Math.toRadians((double)var5)));
         double var10 = (double)MathHelper.cos(Math.toRadians((double)var5));
         double var12 = (double)var4 * var6 * var8 + (double)var3 * var6 * var10;
         double var14 = (double)var4 * var6 * var10 - (double)var3 * var6 * var8;
         if(this.mc.player.isCollidedHorizontally && !this.mc.player.isOnLadder() && this.mc.player.onGround) {
            double var16 = this.mc.player.posX;
            double var18 = this.mc.player.posY;
            double var20 = this.mc.player.posZ;
            this.sendPacket(new C03PacketPlayer$C04PacketPlayerPosition(var16 + var12, var18, var20 + var14, true));
            this.sendPacket(new C03PacketPlayer$C04PacketPlayerPosition(var16, var18 + 3.0D, var20, true));
            this.mc.player.setPosition(var16 + var12, var18, var20 + var14);
         }
      }

   }

   private Boolean lambda$new$0() {
      return Boolean.valueOf(this.y.equals("VClip"));
   }
}
